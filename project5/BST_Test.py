import unittest
from Binary_Search_Tree import Binary_Search_Tree

class BSTTester(unittest.TestCase):
	#Test the functionality of AVL Tree structure
	#Test that the new structure update methods update the tree accordingly to be balanced
	#and the height are correct.
	def setUp(self):
		self.__bst = Binary_Search_Tree()

	#Test insertion
	def test_insertion_balanced_four_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(6)
		self.__bst.insert_element(3)
		self.assertEqual('[ 3, 4, 5, 6 ]', str(self.__bst))

	def test_insertion_balanced_four_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(6)
		self.__bst.insert_element(3)
		self.assertEqual([3, 4, 5, 6], self.__bst.to_list())

	def test_insertion_balanced_four_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(6)
		self.__bst.insert_element(3)
		self.assertEqual('[ 5, 4, 3, 6 ]', self.__bst.pre_order())

	def test_insertion_balanced_four_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(6)
		self.__bst.insert_element(3)
		self.assertEqual('[ 3, 4, 6, 5 ]', self.__bst.post_order())

	def test_insertion_balanced_four_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(6)
		self.__bst.insert_element(3)
		self.assertEqual(3, self.__bst.get_height())
		
	def test_insertion_single_right_rotation_four_element_inorder(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.assertEqual('[ 3, 4, 5, 6 ]', str(self.__bst))

	def test_insertion_single_right_rotation_four_element_list(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.assertEqual([3, 4, 5, 6], self.__bst.to_list())

	def test_insertion_single_right_rotation_four_element_preorder(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.assertEqual('[ 5, 4, 3, 6 ]', self.__bst.pre_order())

	def test_insertion_single_right_rotation_four_element_postorder(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.assertEqual('[ 3, 4, 6, 5 ]', self.__bst.post_order())

	def test_insertion_single_right_rotation_four_element_height(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_single_left_rotation_four_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.assertEqual('[ 5, 6, 7, 8 ]', str(self.__bst))

	def test_insertion_single_left_rotation_four_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.assertEqual([5, 6, 7, 8], self.__bst.to_list())

	def test_insertion_single_left_rotation_four_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.assertEqual('[ 6, 5, 7, 8 ]', self.__bst.pre_order())

	def test_insertion_single_left_rotation_four_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.assertEqual('[ 5, 8, 7, 6 ]', self.__bst.post_order())

	def test_insertion_single_left_rotation_four_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_right_left_rotation_four_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(7)
		self.__bst.insert_element(6)
		self.__bst.insert_element(8)
		self.assertEqual('[ 5, 6, 7, 8 ]', str(self.__bst))

	def test_insertion_right_left_rotation_four_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(7)
		self.__bst.insert_element(6)
		self.__bst.insert_element(8)
		self.assertEqual([5, 6, 7, 8], self.__bst.to_list())

	def test_insertion_right_left_rotation_four_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(7)
		self.__bst.insert_element(6)
		self.__bst.insert_element(8)
		self.assertEqual('[ 6, 5, 7, 8 ]', self.__bst.pre_order())

	def test_insertion_right_left_rotation_four_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(7)
		self.__bst.insert_element(6)
		self.__bst.insert_element(8)
		self.assertEqual('[ 5, 8, 7, 6 ]', self.__bst.post_order())

	def test_insertion_right_left_rotation_four_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(7)
		self.__bst.insert_element(6)
		self.__bst.insert_element(8)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_left_right_rotation_four_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(2)
		self.assertEqual('[ 2, 3, 4, 5 ]', str(self.__bst))

	def test_insertion_left_right_rotation_four_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(2)
		self.assertEqual([2, 3, 4, 5], self.__bst.to_list())

	def test_insertion_left_right_rotation_four_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(2)
		self.assertEqual('[ 4, 3, 2, 5 ]', self.__bst.pre_order())

	def test_insertion_left_right_rotation_four_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(2)
		self.assertEqual('[ 2, 3, 5, 4 ]', self.__bst.post_order())

	def test_insertion_left_right_rotation_four_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(2)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_balanced_five_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(4)
		self.__bst.insert_element(8)
		self.assertEqual('[ 3, 4, 5, 6, 8 ]', str(self.__bst))

	def test_insertion_balanced_five_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(4)
		self.__bst.insert_element(8)
		self.assertEqual([3, 4, 5, 6, 8], self.__bst.to_list())

	def test_insertion_balanced_five_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(4)
		self.__bst.insert_element(8)
		self.assertEqual('[ 5, 3, 4, 6, 8 ]', self.__bst.pre_order())

	def test_insertion_balanced_five_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(4)
		self.__bst.insert_element(8)
		self.assertEqual('[ 4, 3, 8, 6, 5 ]', self.__bst.post_order())

	def test_insertion_balanced_five_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(4)
		self.__bst.insert_element(8)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_two_left_rotations_five_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.__bst.insert_element(2)
		self.__bst.insert_element(1)
		self.assertEqual('[ 1, 2, 3, 4, 5 ]', str(self.__bst))

	def test_insertion_two_left_rotations_five_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.__bst.insert_element(2)
		self.__bst.insert_element(1)
		self.assertEqual([1, 2, 3, 4, 5], self.__bst.to_list())

	def test_insertion_two_left_rotations_five_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.__bst.insert_element(2)
		self.__bst.insert_element(1)
		self.assertEqual('[ 4, 2, 1, 3, 5 ]', self.__bst.pre_order())

	def test_insertion_two_left_rotations_five_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.__bst.insert_element(2)
		self.__bst.insert_element(1)
		self.assertEqual('[ 1, 3, 2, 5, 4 ]', self.__bst.post_order())

	def test_insertion_two_left_rotations_five_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(4)
		self.__bst.insert_element(3)
		self.__bst.insert_element(2)
		self.__bst.insert_element(1)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_two_right_rotations_five_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.__bst.insert_element(9)
		self.assertEqual('[ 5, 6, 7, 8, 9 ]', str(self.__bst))

	def test_insertion_two_right_rotations_five_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.__bst.insert_element(9)
		self.assertEqual([5, 6, 7, 8, 9], self.__bst.to_list())

	def test_insertion_two_right_rotations_five_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.__bst.insert_element(9)
		self.assertEqual('[ 6, 5, 8, 7, 9 ]', self.__bst.pre_order())

	def test_insertion_two_right_rotations_five_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.__bst.insert_element(9)
		self.assertEqual('[ 5, 7, 9, 8, 6 ]', self.__bst.post_order())

	def test_insertion_two_right_rotations_five_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(6)
		self.__bst.insert_element(7)
		self.__bst.insert_element(8)
		self.__bst.insert_element(9)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_two_double_right_left_rotation_five_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(8)
		self.__bst.insert_element(6)
		self.__bst.insert_element(10)
		self.__bst.insert_element(9)
		self.assertEqual('[ 5, 6, 8, 9, 10 ]', str(self.__bst))

	def test_insertion_two_double_right_left_rotation_five_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(8)
		self.__bst.insert_element(6)
		self.__bst.insert_element(10)
		self.__bst.insert_element(9)
		self.assertEqual([5, 6, 8, 9, 10], self.__bst.to_list())

	def test_insertion_two_double_right_left_rotation_five_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(8)
		self.__bst.insert_element(6)
		self.__bst.insert_element(10)
		self.__bst.insert_element(9)
		self.assertEqual('[ 6, 5, 9, 8, 10 ]', self.__bst.pre_order())

	def test_insertion_two_double_right_left_rotation_five_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(8)
		self.__bst.insert_element(6)
		self.__bst.insert_element(10)
		self.__bst.insert_element(9)
		self.assertEqual('[ 5, 8, 10, 9, 6 ]', self.__bst.post_order())

	def test_insertion_two_double_right_left_rotation_five_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(8)
		self.__bst.insert_element(6)
		self.__bst.insert_element(10)
		self.__bst.insert_element(9)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_two_double_left_right_rotation_five_element_inorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.assertEqual('[ 1, 2, 3, 4, 5 ]', str(self.__bst))

	def test_insertion_two_double_left_right_rotation_five_element_list(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.assertEqual([1, 2, 3, 4, 5], self.__bst.to_list())

	def test_insertion_two_double_left_right_rotation_five_element_preorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.assertEqual('[ 4, 2, 1, 3, 5 ]', self.__bst.pre_order())

	def test_insertion_two_double_left_right_rotation_five_element_postorder(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.assertEqual('[ 1, 3, 2, 5, 4 ]', self.__bst.post_order())

	def test_insertion_two_double_left_right_rotation_five_element_height(self):
		self.__bst.insert_element(5)
		self.__bst.insert_element(3)
		self.__bst.insert_element(4)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.assertEqual(3, self.__bst.get_height())

	def test_insertion_double_rotation_different_direction_five_element_inorder(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.__bst.insert_element(4)
		self.__bst.insert_element(5)
		self.assertEqual('[ 1, 2, 4, 5, 6 ]', str(self.__bst))

	def test_insertion_double_rotation_different_direction_five_element_list(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.__bst.insert_element(4)
		self.__bst.insert_element(5)
		self.assertEqual([1, 2, 4, 5, 6], self.__bst.to_list())

	def test_insertion_double_rotation_different_direction_five_element_preorder(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.__bst.insert_element(4)
		self.__bst.insert_element(5)
		self.assertEqual('[ 2, 1, 5, 4, 6 ]', self.__bst.pre_order())

	def test_insertion_double_rotation_different_direction_five_element_postorder(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.__bst.insert_element(4)
		self.__bst.insert_element(5)
		self.assertEqual('[ 1, 4, 6, 5, 2 ]', self.__bst.post_order())

	def test_insertion_double_rotation_different_direction_five_element_height(self):
		self.__bst.insert_element(6)
		self.__bst.insert_element(1)
		self.__bst.insert_element(2)
		self.__bst.insert_element(4)
		self.__bst.insert_element(5)
		self.assertEqual(3, self.__bst.get_height())

	#Test balanced remove
	def test_remove_complex_case_1_one_level_imbalance_inorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(32)
		self.assertEqual('[ 5, 10, 15, 20, 25, 26, 27, 30 ]', str(self.__bst))

	def test_remove_complex_case_1_one_level_imbalance_list(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(32)
		self.assertEqual([5, 10, 15, 20, 25, 26, 27, 30], self.__bst.to_list())

	def test_remove_complex_case_1_one_level_imbalance_preorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(32)
		self.assertEqual('[ 25, 10, 5, 15, 20, 27, 26, 30 ]', self.__bst.pre_order())

	def test_remove_complex_case_1_one_level_imbalance_postorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(32)
		self.assertEqual('[ 5, 20, 15, 10, 26, 30, 27, 25 ]', self.__bst.post_order())

	def test_remove_complex_case_1_one_level_imbalance_height(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(32)
		self.assertEqual(4, self.__bst.get_height())

	def test_remove_complex_case_2_one_level_imbalance_inorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(5)
		self.assertEqual('[ 10, 15, 20, 25, 26, 27, 30, 32 ]', str(self.__bst))

	def test_remove_complex_case_2_one_level_imbalance_list(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(5)
		self.assertEqual([10, 15, 20, 25, 26, 27, 30, 32], self.__bst.to_list())

	def test_remove_complex_case_2_one_level_imbalance_preorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(5)
		self.assertEqual('[ 25, 15, 10, 20, 30, 27, 26, 32 ]', self.__bst.pre_order())

	def test_remove_complex_case_2_one_level_imbalance_postorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(5)
		self.assertEqual('[ 10, 20, 15, 26, 27, 32, 30, 25 ]', self.__bst.post_order())

	def test_remove_complex_case_2_one_level_imbalance_height(self):
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.remove_element(5)
		self.assertEqual(4, self.__bst.get_height())

	def test_remove_complex_case_1_two_level_imbalance_inorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.insert_element(1)
		self.__bst.remove_element(30)
		self.assertEqual('[ 1, 3, 5, 6, 10, 15, 20, 25, 26, 27, 32 ]', str(self.__bst))

	def test_remove_complex_case_1_two_level_imbalance_list(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.insert_element(1)
		self.__bst.remove_element(30)
		self.assertEqual([1, 3, 5, 6, 10, 15, 20, 25, 26, 27, 32], self.__bst.to_list())

	def test_remove_complex_case_1_two_level_imbalance_preorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.insert_element(1)
		self.__bst.remove_element(30)
		self.assertEqual('[ 10, 5, 3, 1, 6, 25, 15, 20, 27, 26, 32 ]', self.__bst.pre_order())

	def test_remove_complex_case_1_two_level_imbalance_postorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.insert_element(1)
		self.__bst.remove_element(30)
		self.assertEqual('[ 1, 3, 6, 5, 20, 15, 26, 32, 27, 25, 10 ]', self.__bst.post_order())

	def test_remove_complex_case_1_two_level_imbalance_height(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(10)
		self.__bst.insert_element(30)
		self.__bst.insert_element(5)
		self.__bst.insert_element(15)
		self.__bst.insert_element(27)
		self.__bst.insert_element(32)
		self.__bst.insert_element(3)
		self.__bst.insert_element(6)
		self.__bst.insert_element(20)
		self.__bst.insert_element(26)
		self.__bst.insert_element(1)
		self.__bst.remove_element(30)
		self.assertEqual(4, self.__bst.get_height())

	def test_remove_complex_case_2_two_level_imbalance_inorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(15)
		self.__bst.insert_element(32)
		self.__bst.insert_element(14)
		self.__bst.insert_element(20)
		self.__bst.insert_element(27)
		self.__bst.insert_element(34)
		self.__bst.insert_element(13)
		self.__bst.insert_element(17)
		self.__bst.insert_element(24)
		self.__bst.insert_element(36)
		self.__bst.insert_element(16)
		self.__bst.remove_element(27)
		self.assertEqual('[ 13, 14, 15, 16, 17, 20, 24, 25, 32, 34, 36 ]', str(self.__bst))

	def test_remove_complex_case_2_two_level_imbalance_list(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(15)
		self.__bst.insert_element(32)
		self.__bst.insert_element(14)
		self.__bst.insert_element(20)
		self.__bst.insert_element(27)
		self.__bst.insert_element(34)
		self.__bst.insert_element(13)
		self.__bst.insert_element(17)
		self.__bst.insert_element(24)
		self.__bst.insert_element(36)
		self.__bst.insert_element(16)
		self.__bst.remove_element(27)
		self.assertEqual([13, 14, 15, 16, 17, 20, 24, 25, 32, 34, 36], self.__bst.to_list())

	def test_remove_complex_case_2_two_level_imbalance_preorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(15)
		self.__bst.insert_element(32)
		self.__bst.insert_element(14)
		self.__bst.insert_element(20)
		self.__bst.insert_element(27)
		self.__bst.insert_element(34)
		self.__bst.insert_element(13)
		self.__bst.insert_element(17)
		self.__bst.insert_element(24)
		self.__bst.insert_element(36)
		self.__bst.insert_element(16)
		self.__bst.remove_element(27)
		self.assertEqual('[ 20, 15, 14, 13, 17, 16, 25, 24, 34, 32, 36 ]', self.__bst.pre_order())

	def test_remove_complex_case_2_two_level_imbalance_postorder(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(15)
		self.__bst.insert_element(32)
		self.__bst.insert_element(14)
		self.__bst.insert_element(20)
		self.__bst.insert_element(27)
		self.__bst.insert_element(34)
		self.__bst.insert_element(13)
		self.__bst.insert_element(17)
		self.__bst.insert_element(24)
		self.__bst.insert_element(36)
		self.__bst.insert_element(16)
		self.__bst.remove_element(27)
		self.assertEqual('[ 13, 14, 16, 17, 15, 24, 32, 36, 34, 25, 20 ]', self.__bst.post_order())

	def test_remove_complex_case_2_two_level_imbalance_height(self):
		self.__bst.insert_element(25)
		self.__bst.insert_element(15)
		self.__bst.insert_element(32)
		self.__bst.insert_element(14)
		self.__bst.insert_element(20)
		self.__bst.insert_element(27)
		self.__bst.insert_element(34)
		self.__bst.insert_element(13)
		self.__bst.insert_element(17)
		self.__bst.insert_element(24)
		self.__bst.insert_element(36)
		self.__bst.insert_element(16)
		self.__bst.remove_element(27)
		self.assertEqual(4, self.__bst.get_height())

	def test_remove_complex_case_1_three_level_imbalance_inorder(self):
		self.__bst.insert_element(50)
		self.__bst.insert_element(30)
		self.__bst.insert_element(70)
		self.__bst.insert_element(20)
		self.__bst.insert_element(40)
		self.__bst.insert_element(60)
		self.__bst.insert_element(90)
		self.__bst.insert_element(15)
		self.__bst.insert_element(25)
		self.__bst.insert_element(35)
		self.__bst.insert_element(45)
		self.__bst.insert_element(55)
		self.__bst.insert_element(65)
		self.__bst.insert_element(85)
		self.__bst.insert_element(96)
		self.__bst.insert_element(10)
		self.__bst.insert_element(22)
		self.__bst.insert_element(26)
		self.__bst.insert_element(46)
		self.__bst.insert_element(54)
		self.__bst.insert_element(57)
		self.__bst.insert_element(64)
		self.__bst.insert_element(66)
		self.__bst.insert_element(80)
		self.__bst.insert_element(93)
		self.__bst.insert_element(98)
		self.__bst.insert_element(27)
		self.__bst.insert_element(53)
		self.__bst.insert_element(56)
		self.__bst.insert_element(58)
		self.__bst.insert_element(67)
		self.__bst.insert_element(100)
		self.__bst.insert_element(59)
		self.__bst.remove_element(35)
		self.assertEqual('[ 10, 15, 20, 22, 25, 26, 27, 30, 40, 45, 46, 50, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 70, 80, 85, 90, 93, 96, 98, 100 ]', str(self.__bst))

	def test_remove_complex_case_1_three_level_imbalance_list(self):
		self.__bst.insert_element(50)
		self.__bst.insert_element(30)
		self.__bst.insert_element(70)
		self.__bst.insert_element(20)
		self.__bst.insert_element(40)
		self.__bst.insert_element(60)
		self.__bst.insert_element(90)
		self.__bst.insert_element(15)
		self.__bst.insert_element(25)
		self.__bst.insert_element(35)
		self.__bst.insert_element(45)
		self.__bst.insert_element(55)
		self.__bst.insert_element(65)
		self.__bst.insert_element(85)
		self.__bst.insert_element(96)
		self.__bst.insert_element(10)
		self.__bst.insert_element(22)
		self.__bst.insert_element(26)
		self.__bst.insert_element(46)
		self.__bst.insert_element(54)
		self.__bst.insert_element(57)
		self.__bst.insert_element(64)
		self.__bst.insert_element(66)
		self.__bst.insert_element(80)
		self.__bst.insert_element(93)
		self.__bst.insert_element(98)
		self.__bst.insert_element(27)
		self.__bst.insert_element(53)
		self.__bst.insert_element(56)
		self.__bst.insert_element(58)
		self.__bst.insert_element(67)
		self.__bst.insert_element(100)
		self.__bst.insert_element(59)
		self.__bst.remove_element(35)
		self.assertEqual([10, 15, 20, 22, 25, 26, 27, 30, 40, 45, 46, 50, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 70, 80, 85, 90, 93, 96, 98, 100], self.__bst.to_list())

	def test_remove_complex_case_1_three_level_imbalance_preorder(self):
		self.__bst.insert_element(50)
		self.__bst.insert_element(30)
		self.__bst.insert_element(70)
		self.__bst.insert_element(20)
		self.__bst.insert_element(40)
		self.__bst.insert_element(60)
		self.__bst.insert_element(90)
		self.__bst.insert_element(15)
		self.__bst.insert_element(25)
		self.__bst.insert_element(35)
		self.__bst.insert_element(45)
		self.__bst.insert_element(55)
		self.__bst.insert_element(65)
		self.__bst.insert_element(85)
		self.__bst.insert_element(96)
		self.__bst.insert_element(10)
		self.__bst.insert_element(22)
		self.__bst.insert_element(26)
		self.__bst.insert_element(46)
		self.__bst.insert_element(54)
		self.__bst.insert_element(57)
		self.__bst.insert_element(64)
		self.__bst.insert_element(66)
		self.__bst.insert_element(80)
		self.__bst.insert_element(93)
		self.__bst.insert_element(98)
		self.__bst.insert_element(27)
		self.__bst.insert_element(53)
		self.__bst.insert_element(56)
		self.__bst.insert_element(58)
		self.__bst.insert_element(67)
		self.__bst.insert_element(100)
		self.__bst.insert_element(59)
		self.__bst.remove_element(35)
		self.assertEqual('[ 60, 50, 25, 20, 15, 10, 22, 30, 26, 27, 45, 40, 46, 55, 54, 53, 57, 56, 58, 59, 70, 65, 64, 66, 67, 90, 85, 80, 96, 93, 98, 100 ]', self.__bst.pre_order())

	def test_remove_complex_case_1_three_level_imbalance_postorder(self):
		self.__bst.insert_element(50)
		self.__bst.insert_element(30)
		self.__bst.insert_element(70)
		self.__bst.insert_element(20)
		self.__bst.insert_element(40)
		self.__bst.insert_element(60)
		self.__bst.insert_element(90)
		self.__bst.insert_element(15)
		self.__bst.insert_element(25)
		self.__bst.insert_element(35)
		self.__bst.insert_element(45)
		self.__bst.insert_element(55)
		self.__bst.insert_element(65)
		self.__bst.insert_element(85)
		self.__bst.insert_element(96)
		self.__bst.insert_element(10)
		self.__bst.insert_element(22)
		self.__bst.insert_element(26)
		self.__bst.insert_element(46)
		self.__bst.insert_element(54)
		self.__bst.insert_element(57)
		self.__bst.insert_element(64)
		self.__bst.insert_element(66)
		self.__bst.insert_element(80)
		self.__bst.insert_element(93)
		self.__bst.insert_element(98)
		self.__bst.insert_element(27)
		self.__bst.insert_element(53)
		self.__bst.insert_element(56)
		self.__bst.insert_element(58)
		self.__bst.insert_element(67)
		self.__bst.insert_element(100)
		self.__bst.insert_element(59)
		self.__bst.remove_element(35)
		self.assertEqual('[ 10, 15, 22, 20, 27, 26, 40, 46, 45, 30, 25, 53, 54, 56, 59, 58, 57, 55, 50, 64, 67, 66, 65, 80, 85, 93, 100, 98, 96, 90, 70, 60 ]', self.__bst.post_order())

	def test_remove_complex_case_1_three_level_imbalance_height(self):
		self.__bst.insert_element(50)
		self.__bst.insert_element(30)
		self.__bst.insert_element(70)
		self.__bst.insert_element(20)
		self.__bst.insert_element(40)
		self.__bst.insert_element(60)
		self.__bst.insert_element(90)
		self.__bst.insert_element(15)
		self.__bst.insert_element(25)
		self.__bst.insert_element(35)
		self.__bst.insert_element(45)
		self.__bst.insert_element(55)
		self.__bst.insert_element(65)
		self.__bst.insert_element(85)
		self.__bst.insert_element(96)
		self.__bst.insert_element(10)
		self.__bst.insert_element(22)
		self.__bst.insert_element(26)
		self.__bst.insert_element(46)
		self.__bst.insert_element(54)
		self.__bst.insert_element(57)
		self.__bst.insert_element(64)
		self.__bst.insert_element(66)
		self.__bst.insert_element(80)
		self.__bst.insert_element(93)
		self.__bst.insert_element(98)
		self.__bst.insert_element(27)
		self.__bst.insert_element(53)
		self.__bst.insert_element(56)
		self.__bst.insert_element(58)
		self.__bst.insert_element(67)
		self.__bst.insert_element(100)
		self.__bst.insert_element(59)
		self.__bst.remove_element(35)
		self.assertEqual(6, self.__bst.get_height())
		

if __name__ == '__main__':
	unittest.main()

	